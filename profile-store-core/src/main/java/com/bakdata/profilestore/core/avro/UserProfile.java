/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bakdata.profilestore.core.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserProfile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2457765605782027013L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserProfile\",\"namespace\":\"com.bakdata.profilestore.core.avro\",\"fields\":[{\"name\":\"eventCount\",\"type\":\"long\"},{\"name\":\"firstListeningEvent\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"lastListeningEvent\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"topTenArtist\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ChartTuple\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"countPlays\",\"type\":\"long\"}]}}},{\"name\":\"topTenAlbums\",\"type\":{\"type\":\"array\",\"items\":\"ChartTuple\"}},{\"name\":\"topTenTracks\",\"type\":{\"type\":\"array\",\"items\":\"ChartTuple\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<UserProfile> ENCODER =
      new BinaryMessageEncoder<UserProfile>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserProfile> DECODER =
      new BinaryMessageDecoder<UserProfile>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserProfile> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserProfile> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserProfile> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserProfile>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserProfile to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserProfile from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserProfile instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserProfile fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long eventCount;
  @Deprecated public java.time.Instant firstListeningEvent;
  @Deprecated public java.time.Instant lastListeningEvent;
  @Deprecated public java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> topTenArtist;
  @Deprecated public java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> topTenAlbums;
  @Deprecated public java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> topTenTracks;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserProfile() {}

  /**
   * All-args constructor.
   * @param eventCount The new value for eventCount
   * @param firstListeningEvent The new value for firstListeningEvent
   * @param lastListeningEvent The new value for lastListeningEvent
   * @param topTenArtist The new value for topTenArtist
   * @param topTenAlbums The new value for topTenAlbums
   * @param topTenTracks The new value for topTenTracks
   */
  public UserProfile(java.lang.Long eventCount, java.time.Instant firstListeningEvent, java.time.Instant lastListeningEvent, java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> topTenArtist, java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> topTenAlbums, java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> topTenTracks) {
    this.eventCount = eventCount;
    this.firstListeningEvent = firstListeningEvent.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.lastListeningEvent = lastListeningEvent.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.topTenArtist = topTenArtist;
    this.topTenAlbums = topTenAlbums;
    this.topTenTracks = topTenTracks;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventCount;
    case 1: return firstListeningEvent;
    case 2: return lastListeningEvent;
    case 3: return topTenArtist;
    case 4: return topTenAlbums;
    case 5: return topTenTracks;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventCount = (java.lang.Long)value$; break;
    case 1: firstListeningEvent = (java.time.Instant)value$; break;
    case 2: lastListeningEvent = (java.time.Instant)value$; break;
    case 3: topTenArtist = (java.util.List<com.bakdata.profilestore.core.avro.ChartTuple>)value$; break;
    case 4: topTenAlbums = (java.util.List<com.bakdata.profilestore.core.avro.ChartTuple>)value$; break;
    case 5: topTenTracks = (java.util.List<com.bakdata.profilestore.core.avro.ChartTuple>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventCount' field.
   * @return The value of the 'eventCount' field.
   */
  public long getEventCount() {
    return eventCount;
  }


  /**
   * Sets the value of the 'eventCount' field.
   * @param value the value to set.
   */
  public void setEventCount(long value) {
    this.eventCount = value;
  }

  /**
   * Gets the value of the 'firstListeningEvent' field.
   * @return The value of the 'firstListeningEvent' field.
   */
  public java.time.Instant getFirstListeningEvent() {
    return firstListeningEvent;
  }


  /**
   * Sets the value of the 'firstListeningEvent' field.
   * @param value the value to set.
   */
  public void setFirstListeningEvent(java.time.Instant value) {
    this.firstListeningEvent = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'lastListeningEvent' field.
   * @return The value of the 'lastListeningEvent' field.
   */
  public java.time.Instant getLastListeningEvent() {
    return lastListeningEvent;
  }


  /**
   * Sets the value of the 'lastListeningEvent' field.
   * @param value the value to set.
   */
  public void setLastListeningEvent(java.time.Instant value) {
    this.lastListeningEvent = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'topTenArtist' field.
   * @return The value of the 'topTenArtist' field.
   */
  public java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> getTopTenArtist() {
    return topTenArtist;
  }


  /**
   * Sets the value of the 'topTenArtist' field.
   * @param value the value to set.
   */
  public void setTopTenArtist(java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> value) {
    this.topTenArtist = value;
  }

  /**
   * Gets the value of the 'topTenAlbums' field.
   * @return The value of the 'topTenAlbums' field.
   */
  public java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> getTopTenAlbums() {
    return topTenAlbums;
  }


  /**
   * Sets the value of the 'topTenAlbums' field.
   * @param value the value to set.
   */
  public void setTopTenAlbums(java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> value) {
    this.topTenAlbums = value;
  }

  /**
   * Gets the value of the 'topTenTracks' field.
   * @return The value of the 'topTenTracks' field.
   */
  public java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> getTopTenTracks() {
    return topTenTracks;
  }


  /**
   * Sets the value of the 'topTenTracks' field.
   * @param value the value to set.
   */
  public void setTopTenTracks(java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> value) {
    this.topTenTracks = value;
  }

  /**
   * Creates a new UserProfile RecordBuilder.
   * @return A new UserProfile RecordBuilder
   */
  public static com.bakdata.profilestore.core.avro.UserProfile.Builder newBuilder() {
    return new com.bakdata.profilestore.core.avro.UserProfile.Builder();
  }

  /**
   * Creates a new UserProfile RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserProfile RecordBuilder
   */
  public static com.bakdata.profilestore.core.avro.UserProfile.Builder newBuilder(com.bakdata.profilestore.core.avro.UserProfile.Builder other) {
    if (other == null) {
      return new com.bakdata.profilestore.core.avro.UserProfile.Builder();
    } else {
      return new com.bakdata.profilestore.core.avro.UserProfile.Builder(other);
    }
  }

  /**
   * Creates a new UserProfile RecordBuilder by copying an existing UserProfile instance.
   * @param other The existing instance to copy.
   * @return A new UserProfile RecordBuilder
   */
  public static com.bakdata.profilestore.core.avro.UserProfile.Builder newBuilder(com.bakdata.profilestore.core.avro.UserProfile other) {
    if (other == null) {
      return new com.bakdata.profilestore.core.avro.UserProfile.Builder();
    } else {
      return new com.bakdata.profilestore.core.avro.UserProfile.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserProfile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserProfile>
    implements org.apache.avro.data.RecordBuilder<UserProfile> {

    private long eventCount;
    private java.time.Instant firstListeningEvent;
    private java.time.Instant lastListeningEvent;
    private java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> topTenArtist;
    private java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> topTenAlbums;
    private java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> topTenTracks;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bakdata.profilestore.core.avro.UserProfile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventCount)) {
        this.eventCount = data().deepCopy(fields()[0].schema(), other.eventCount);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.firstListeningEvent)) {
        this.firstListeningEvent = data().deepCopy(fields()[1].schema(), other.firstListeningEvent);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lastListeningEvent)) {
        this.lastListeningEvent = data().deepCopy(fields()[2].schema(), other.lastListeningEvent);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.topTenArtist)) {
        this.topTenArtist = data().deepCopy(fields()[3].schema(), other.topTenArtist);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.topTenAlbums)) {
        this.topTenAlbums = data().deepCopy(fields()[4].schema(), other.topTenAlbums);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.topTenTracks)) {
        this.topTenTracks = data().deepCopy(fields()[5].schema(), other.topTenTracks);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing UserProfile instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bakdata.profilestore.core.avro.UserProfile other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventCount)) {
        this.eventCount = data().deepCopy(fields()[0].schema(), other.eventCount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstListeningEvent)) {
        this.firstListeningEvent = data().deepCopy(fields()[1].schema(), other.firstListeningEvent);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastListeningEvent)) {
        this.lastListeningEvent = data().deepCopy(fields()[2].schema(), other.lastListeningEvent);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.topTenArtist)) {
        this.topTenArtist = data().deepCopy(fields()[3].schema(), other.topTenArtist);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.topTenAlbums)) {
        this.topTenAlbums = data().deepCopy(fields()[4].schema(), other.topTenAlbums);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.topTenTracks)) {
        this.topTenTracks = data().deepCopy(fields()[5].schema(), other.topTenTracks);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'eventCount' field.
      * @return The value.
      */
    public long getEventCount() {
      return eventCount;
    }


    /**
      * Sets the value of the 'eventCount' field.
      * @param value The value of 'eventCount'.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder setEventCount(long value) {
      validate(fields()[0], value);
      this.eventCount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventCount' field has been set.
      * @return True if the 'eventCount' field has been set, false otherwise.
      */
    public boolean hasEventCount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventCount' field.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder clearEventCount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstListeningEvent' field.
      * @return The value.
      */
    public java.time.Instant getFirstListeningEvent() {
      return firstListeningEvent;
    }


    /**
      * Sets the value of the 'firstListeningEvent' field.
      * @param value The value of 'firstListeningEvent'.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder setFirstListeningEvent(java.time.Instant value) {
      validate(fields()[1], value);
      this.firstListeningEvent = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'firstListeningEvent' field has been set.
      * @return True if the 'firstListeningEvent' field has been set, false otherwise.
      */
    public boolean hasFirstListeningEvent() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'firstListeningEvent' field.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder clearFirstListeningEvent() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastListeningEvent' field.
      * @return The value.
      */
    public java.time.Instant getLastListeningEvent() {
      return lastListeningEvent;
    }


    /**
      * Sets the value of the 'lastListeningEvent' field.
      * @param value The value of 'lastListeningEvent'.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder setLastListeningEvent(java.time.Instant value) {
      validate(fields()[2], value);
      this.lastListeningEvent = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastListeningEvent' field has been set.
      * @return True if the 'lastListeningEvent' field has been set, false otherwise.
      */
    public boolean hasLastListeningEvent() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastListeningEvent' field.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder clearLastListeningEvent() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'topTenArtist' field.
      * @return The value.
      */
    public java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> getTopTenArtist() {
      return topTenArtist;
    }


    /**
      * Sets the value of the 'topTenArtist' field.
      * @param value The value of 'topTenArtist'.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder setTopTenArtist(java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> value) {
      validate(fields()[3], value);
      this.topTenArtist = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'topTenArtist' field has been set.
      * @return True if the 'topTenArtist' field has been set, false otherwise.
      */
    public boolean hasTopTenArtist() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'topTenArtist' field.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder clearTopTenArtist() {
      topTenArtist = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'topTenAlbums' field.
      * @return The value.
      */
    public java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> getTopTenAlbums() {
      return topTenAlbums;
    }


    /**
      * Sets the value of the 'topTenAlbums' field.
      * @param value The value of 'topTenAlbums'.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder setTopTenAlbums(java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> value) {
      validate(fields()[4], value);
      this.topTenAlbums = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'topTenAlbums' field has been set.
      * @return True if the 'topTenAlbums' field has been set, false otherwise.
      */
    public boolean hasTopTenAlbums() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'topTenAlbums' field.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder clearTopTenAlbums() {
      topTenAlbums = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'topTenTracks' field.
      * @return The value.
      */
    public java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> getTopTenTracks() {
      return topTenTracks;
    }


    /**
      * Sets the value of the 'topTenTracks' field.
      * @param value The value of 'topTenTracks'.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder setTopTenTracks(java.util.List<com.bakdata.profilestore.core.avro.ChartTuple> value) {
      validate(fields()[5], value);
      this.topTenTracks = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'topTenTracks' field has been set.
      * @return True if the 'topTenTracks' field has been set, false otherwise.
      */
    public boolean hasTopTenTracks() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'topTenTracks' field.
      * @return This builder.
      */
    public com.bakdata.profilestore.core.avro.UserProfile.Builder clearTopTenTracks() {
      topTenTracks = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserProfile build() {
      try {
        UserProfile record = new UserProfile();
        record.eventCount = fieldSetFlags()[0] ? this.eventCount : (java.lang.Long) defaultValue(fields()[0]);
        record.firstListeningEvent = fieldSetFlags()[1] ? this.firstListeningEvent : (java.time.Instant) defaultValue(fields()[1]);
        record.lastListeningEvent = fieldSetFlags()[2] ? this.lastListeningEvent : (java.time.Instant) defaultValue(fields()[2]);
        record.topTenArtist = fieldSetFlags()[3] ? this.topTenArtist : (java.util.List<com.bakdata.profilestore.core.avro.ChartTuple>) defaultValue(fields()[3]);
        record.topTenAlbums = fieldSetFlags()[4] ? this.topTenAlbums : (java.util.List<com.bakdata.profilestore.core.avro.ChartTuple>) defaultValue(fields()[4]);
        record.topTenTracks = fieldSetFlags()[5] ? this.topTenTracks : (java.util.List<com.bakdata.profilestore.core.avro.ChartTuple>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserProfile>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserProfile>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserProfile>
    READER$ = (org.apache.avro.io.DatumReader<UserProfile>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










